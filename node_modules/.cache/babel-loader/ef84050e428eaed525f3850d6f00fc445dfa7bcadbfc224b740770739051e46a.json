{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  data: () => ({\n    products: [],\n    orders: []\n  }),\n  methods: {\n    decrement(index) {\n      if (this.products[index].bpm > 0) {\n        this.products[index].bpm--;\n      }\n    },\n    increment(index) {\n      this.products[index].bpm++;\n    },\n    fetchProducts() {\n      axios.get('http://localhost:3000/products').then(response => {\n        this.products = response.data.data.map(product => ({\n          ...product,\n          bpm: 0\n        }));\n        console.log(this.products);\n      }).catch(error => {\n        console.error('Error fetching products:', error);\n      });\n    },\n    addToOrder(index) {\n      const product = this.products[index];\n      if (product.bpm > 0) {\n        const orderItem = {\n          id: product.id,\n          products_name: product.products_name,\n          price: product.price,\n          amount: product.bpm\n        };\n        this.orders.push(orderItem);\n        this.products[index].bpm = 0; // Reset bpm after adding to order\n        console.log(this.orders);\n      } else {\n        alert('Please select at least one item to add to order.');\n      }\n    },\n    async saveOrder() {\n      try {\n        const response = await axios.post('http://localhost:3000/products' + this.id + orders, this.postdata);\n        console.log(response.data);\n        alert('Order created successfully');\n        this.orders = []; // Reset orders after saving\n      } catch (error) {\n        console.error(error);\n        alert('Error creating order');\n      }\n    }\n  },\n  created() {\n    this.fetchProducts(); // Fetch products when the component is created\n  }\n};","map":{"version":3,"names":["axios","data","products","orders","methods","decrement","index","bpm","increment","fetchProducts","get","then","response","map","product","console","log","catch","error","addToOrder","orderItem","id","products_name","price","amount","push","alert","saveOrder","post","postdata","created"],"sources":["src/views/Product.vue"],"sourcesContent":["<template>\n    <v-row justify=\"center\" class=\"space px-16\">\n        <v-col cols=\"12\" xs=\"12\" sm=\"6\" md=\"4\" v-for=\"(product, i) in products\" :key=\"i\">\n            <v-card class=\"mx-auto rounded-xl\" max-width=\"300\" color=\"\" flat outlined>\n                <div align=\"center\" justify=\"center\">\n                    <v-img max-height=\"300\" max-width=\"300\" contain :src=\"product.img\"></v-img>\n                </div>\n                <div align=\"center\" justify=\"center\">\n                    <v-img max-height=\"300\" max-width=\"300\" contain :src=\"product.menu\"></v-img>\n                </div>\n                <v-card-title>{{ product.products_name }}</v-card-title>\n                <v-card-title class=\"grey--text text-grey-darken-1 caption mt-n6\">{{ product.subtitle }}</v-card-title>\n                <v-card-title class=\"mt-n4\">{{ product.price }}</v-card-title>\n                <v-card-actions class=\"mx-2 mt-n4\">\n                    <v-btn outlined class=\"mt-n2 add\" @click=\"decrement(i)\">\n                        <v-icon color=\"green\">fa fa-minus</v-icon>\n                    </v-btn>\n                    <strong class=\"mx-2\" v-text=\"product.bpm\"></strong>\n                    <v-btn outlined class=\"mt-n2 add\" @click=\"increment(i)\">\n                        <v-icon color=\"green\">fa fa-plus</v-icon>\n                    </v-btn>\n                    <v-spacer></v-spacer>\n                    <v-btn class=\"mx-2 mt-n3\" fab dark small color=\"green\" @click=\"addToOrder(i)\">\n                        <v-icon dark>fa fa-shopping-basket</v-icon>\n                    </v-btn>\n                </v-card-actions>\n            </v-card>\n            <v-btn class=\"mt-3\" color=\"primary\" @click=\"saveOrder\">Save Order</v-btn>\n        </v-col>\n    </v-row>\n</template>\n\n\n<script>\nimport axios from 'axios';\n\nexport default {\n    data: () => ({\n        products: [],\n        orders: [],\n    }),\n    methods: {\n        decrement(index) {\n            if (this.products[index].bpm > 0) {\n                this.products[index].bpm--;\n            }\n        },\n        increment(index) {\n            this.products[index].bpm++;\n        },\n        fetchProducts() {\n            axios.get('http://localhost:3000/products')\n                .then(response => {\n                    this.products = response.data.data.map(product => ({\n                        ...product,\n                        bpm: 0\n                    }));\n                    console.log(this.products);\n                })\n                .catch(error => {\n                    console.error('Error fetching products:', error);\n                });\n        },\n        addToOrder(index) {\n            const product = this.products[index];\n            if (product.bpm > 0) {\n                const orderItem = {\n                    id: product.id,\n                    products_name: product.products_name,\n                    price: product.price,\n                    amount: product.bpm\n                };\n                this.orders.push(orderItem);\n                this.products[index].bpm = 0; // Reset bpm after adding to order\n                console.log(this.orders);\n            } else {\n                alert('Please select at least one item to add to order.');\n            }\n        },\n        async saveOrder() {\n            try {\n                const response = await axios.post('http://localhost:3000/products'+ this.id +orders, this.postdata);\n                console.log(response.data);\n                alert('Order created successfully');\n                this.orders = []; // Reset orders after saving\n            } catch (error) {\n                console.error(error);\n                alert('Error creating order');\n            }\n        },\n    },\n    created() {\n        this.fetchProducts(); // Fetch products when the component is created\n    }\n};\n</script>"],"mappings":";AAkCA,OAAAA,KAAA;AAEA;EACAC,IAAA,EAAAA,CAAA;IACAC,QAAA;IACAC,MAAA;EACA;EACAC,OAAA;IACAC,UAAAC,KAAA;MACA,SAAAJ,QAAA,CAAAI,KAAA,EAAAC,GAAA;QACA,KAAAL,QAAA,CAAAI,KAAA,EAAAC,GAAA;MACA;IACA;IACAC,UAAAF,KAAA;MACA,KAAAJ,QAAA,CAAAI,KAAA,EAAAC,GAAA;IACA;IACAE,cAAA;MACAT,KAAA,CAAAU,GAAA,mCACAC,IAAA,CAAAC,QAAA;QACA,KAAAV,QAAA,GAAAU,QAAA,CAAAX,IAAA,CAAAA,IAAA,CAAAY,GAAA,CAAAC,OAAA;UACA,GAAAA,OAAA;UACAP,GAAA;QACA;QACAQ,OAAA,CAAAC,GAAA,MAAAd,QAAA;MACA,GACAe,KAAA,CAAAC,KAAA;QACAH,OAAA,CAAAG,KAAA,6BAAAA,KAAA;MACA;IACA;IACAC,WAAAb,KAAA;MACA,MAAAQ,OAAA,QAAAZ,QAAA,CAAAI,KAAA;MACA,IAAAQ,OAAA,CAAAP,GAAA;QACA,MAAAa,SAAA;UACAC,EAAA,EAAAP,OAAA,CAAAO,EAAA;UACAC,aAAA,EAAAR,OAAA,CAAAQ,aAAA;UACAC,KAAA,EAAAT,OAAA,CAAAS,KAAA;UACAC,MAAA,EAAAV,OAAA,CAAAP;QACA;QACA,KAAAJ,MAAA,CAAAsB,IAAA,CAAAL,SAAA;QACA,KAAAlB,QAAA,CAAAI,KAAA,EAAAC,GAAA;QACAQ,OAAA,CAAAC,GAAA,MAAAb,MAAA;MACA;QACAuB,KAAA;MACA;IACA;IACA,MAAAC,UAAA;MACA;QACA,MAAAf,QAAA,SAAAZ,KAAA,CAAA4B,IAAA,yCAAAP,EAAA,GAAAlB,MAAA,OAAA0B,QAAA;QACAd,OAAA,CAAAC,GAAA,CAAAJ,QAAA,CAAAX,IAAA;QACAyB,KAAA;QACA,KAAAvB,MAAA;MACA,SAAAe,KAAA;QACAH,OAAA,CAAAG,KAAA,CAAAA,KAAA;QACAQ,KAAA;MACA;IACA;EACA;EACAI,QAAA;IACA,KAAArB,aAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}